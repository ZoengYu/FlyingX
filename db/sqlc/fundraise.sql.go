// Code generated by sqlc. DO NOT EDIT.
// source: fundraise.sql

package db

import (
	"context"
	"database/sql"
)

const createFundraise = `-- name: CreateFundraise :one
INSERT INTO fundraise (
	product_id,
  target_amount,
  progress_amount
) VALUES (
  $1, $2, $3
) RETURNING id, product_id, target_amount, progress_amount, success, start_date, end_date
`

type CreateFundraiseParams struct {
	ProductID      int64 `json:"product_id"`
	TargetAmount   int64 `json:"target_amount"`
	ProgressAmount int64 `json:"progress_amount"`
}

func (q *Queries) CreateFundraise(ctx context.Context, arg CreateFundraiseParams) (Fundraise, error) {
	row := q.db.QueryRowContext(ctx, createFundraise, arg.ProductID, arg.TargetAmount, arg.ProgressAmount)
	var i Fundraise
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.TargetAmount,
		&i.ProgressAmount,
		&i.Success,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const exitFundraise = `-- name: ExitFundraise :one
UPDATE fundraise
SET success = $2, end_date = $3
WHERE product_id = $1
RETURNING id, product_id, target_amount, progress_amount, success, start_date, end_date
`

type ExitFundraiseParams struct {
	ProductID int64        `json:"product_id"`
	Success   sql.NullBool `json:"success"`
	EndDate   sql.NullTime `json:"end_date"`
}

func (q *Queries) ExitFundraise(ctx context.Context, arg ExitFundraiseParams) (Fundraise, error) {
	row := q.db.QueryRowContext(ctx, exitFundraise, arg.ProductID, arg.Success, arg.EndDate)
	var i Fundraise
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.TargetAmount,
		&i.ProgressAmount,
		&i.Success,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getFundraise = `-- name: GetFundraise :one
SELECT id, product_id, target_amount, progress_amount, success, start_date, end_date FROM fundraise
WHERE product_id = $1 LIMIT 1
`

func (q *Queries) GetFundraise(ctx context.Context, productID int64) (Fundraise, error) {
	row := q.db.QueryRowContext(ctx, getFundraise, productID)
	var i Fundraise
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.TargetAmount,
		&i.ProgressAmount,
		&i.Success,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
