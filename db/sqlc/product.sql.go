// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (
	account_id,
  title,
  content,
	product_tag
) VALUES (
  $1, $2, $3,$4
) RETURNING id, account_id, title, content, product_tag, created_at
`

type CreateProductParams struct {
	AccountID  int64  `json:"account_id"`
	Title      string `json:"title"`
	Content    string `json:"content"`
	ProductTag string `json:"product_tag"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.AccountID,
		arg.Title,
		arg.Content,
		arg.ProductTag,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Content,
		&i.ProductTag,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, account_id, title, content, product_tag, created_at FROM product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Content,
		&i.ProductTag,
		&i.CreatedAt,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, account_id, title, content, product_tag, created_at FROM product
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Title,
			&i.Content,
			&i.ProductTag,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductContent = `-- name: UpdateProductContent :one
UPDATE product
SET content = $2
WHERE id = $1
RETURNING id, account_id, title, content, product_tag, created_at
`

type UpdateProductContentParams struct {
	ID      int64  `json:"id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateProductContent(ctx context.Context, arg UpdateProductContentParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductContent, arg.ID, arg.Content)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Content,
		&i.ProductTag,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductTag = `-- name: UpdateProductTag :one
UPDATE product
SET product_tag = $2
WHERE id = $1
RETURNING id, account_id, title, content, product_tag, created_at
`

type UpdateProductTagParams struct {
	ID         int64  `json:"id"`
	ProductTag string `json:"product_tag"`
}

func (q *Queries) UpdateProductTag(ctx context.Context, arg UpdateProductTagParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductTag, arg.ID, arg.ProductTag)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Content,
		&i.ProductTag,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductTitle = `-- name: UpdateProductTitle :one
UPDATE product
SET title = $2
WHERE id = $1
RETURNING id, account_id, title, content, product_tag, created_at
`

type UpdateProductTitleParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) UpdateProductTitle(ctx context.Context, arg UpdateProductTitleParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductTitle, arg.ID, arg.Title)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Title,
		&i.Content,
		&i.ProductTag,
		&i.CreatedAt,
	)
	return i, err
}
